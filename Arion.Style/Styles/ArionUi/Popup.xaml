<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:Arion.Style.Controls"
    xmlns:converters="clr-namespace:Arion.Style.Converters">
    <Style x:Key="PopupBoxButton" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="16,0,16,16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            x:Name="MouseOverBorder"
                            Background="{TemplateBinding Foreground,
                                                         Converter={StaticResource BrushRoundConverter}}"
                            Opacity="0" />
                        <!--  <wpf:Ripple MinHeight="48"  -->
                        <!--  Padding="{TemplateBinding Padding}"  -->
                        <!--  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"  -->
                        <!--  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"  -->
                        <!--  Content="{TemplateBinding Content}"  -->
                        <!--  ContentTemplate="{TemplateBinding ContentTemplate}"  -->
                        <!--  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"  -->
                        <!--  Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"  -->
                        <!--  Focusable="False"  -->
                        <!--  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />  -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="MouseOverBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.48"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
    </Style>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:NullableToVisibilityConverter x:Key="NullVisibilityConverter" />
    <converters:NullableToVisibilityConverter
        x:Key="InvertedNullVisibilityConverter"
        NotNullValue="Collapsed"
        NullValue="Visible" />
    <converters:BrushRoundConverter x:Key="BrushRoundConverter" />
    <converters:NotConverter x:Key="NotConverter" />

    <controls:Icon
        x:Key="MaterialDesignPopupBoxToggleContent"
        Width="24"
        Height="24"
        Margin="4,0,4,0"
        x:Shared="False"
        Foreground="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:PopupBox}, Path=Foreground}"
        Kind="DotsVertical" />

    <Style x:Key="MaterialDesignPopupBox" TargetType="{x:Type controls:PopupBox}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Padding" Value="0,8,0,8" />
        <Setter Property="PopupHorizontalOffset" Value="5" />
        <Setter Property="PopupUniformCornerRadius" Value="2" />
        <Setter Property="PopupVerticalOffset" Value="5" />
        <Setter Property="ToolTipService.IsEnabled" Value="{Binding IsPopupOpen, RelativeSource={RelativeSource Self}, Converter={StaticResource NotConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource MaterialDesignSeparator}" TargetType="Separator" />
                        <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <!--  <wpf:Ripple Padding="{TemplateBinding Padding}"  -->
                                        <!--  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"  -->
                                        <!--  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"  -->
                                        <!--  wpf:RippleAssist.IsCentered="True"  -->
                                        <!--  ClipToBounds="False"  -->
                                        <!--  Content="{TemplateBinding Content}"  -->
                                        <!--  ContentTemplate="{TemplateBinding ContentTemplate}"  -->
                                        <!--  Focusable="False"  -->
                                        <!--  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />  -->
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton
                            x:Name="PART_Toggle"
                            VerticalAlignment="Center"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding ToggleContent}"
                            ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                            Cursor="Hand"
                            IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                            IsTabStop="{TemplateBinding IsTabStop}"
                            Style="{StaticResource ToggleButtonStyle}"
                            TabIndex="{TemplateBinding TabIndex}" />
                        <controls:PopupEx
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                            HorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupHorizontalOffset}"
                            IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                            Placement="Custom"
                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                            PopupAnimation="Fade"
                            VerticalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupVerticalOffset}">
                            <!--  <wpf:Card Margin="5"  -->
                            <!--  Padding="{TemplateBinding Padding}"  -->
                            <!--  Content="{TemplateBinding PopupContent}"  -->
                            <!--  ContentTemplate="{TemplateBinding PopupContentTemplate}"  -->
                            <!--  Foreground="{DynamicResource MaterialDesignBody}"  -->
                            <!--  RenderOptions.ClearTypeHint="Enabled"  -->
                            <!--  UniformCornerRadius="{TemplateBinding PopupUniformCornerRadius}">  -->
                            <!--   <wpf:Card.Resources> -->
                            <!--     <Style TargetType="Button" BasedOn="{StaticResource PopupBoxButton}" /> -->
                            <!--   </wpf:Card.Resources> -->
                            <!-- </wpf:Card> -->
                        </controls:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.38" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignPopupBoxToggleContent}" />
        <!-- <Setter Property="wpf:ElevationAssist.Elevation" Value="Dp6" /> -->
        <!-- <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" /> -->
    </Style>
</ResourceDictionary>
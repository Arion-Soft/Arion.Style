<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:Arion.Style.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="FontFamily.xaml" />
        <ResourceDictionary Source="Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Background" Value="{StaticResource Pr500}" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid Height="{TemplateBinding Height}">
                            <Border
                                Background="Black"
                                CornerRadius="6"
                                Opacity="0.05" />
                            <Border
                                BorderBrush="Black"
                                BorderThickness="1"
                                CornerRadius="6"
                                Opacity="0.1" />
                            <Grid Margin="{TemplateBinding BorderThickness}">
                                <Border x:Name="PART_Track" />
                                <Grid
                                    x:Name="PART_Indicator"
                                    HorizontalAlignment="Left"
                                    ClipToBounds="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="width1" />
                                        <ColumnDefinition x:Name="width2" Width="0" />
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="Animation" RenderTransformOrigin="0.5,0.5">
                                        <Grid.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="1" ScaleY="-1" />
                                                <SkewTransform AngleX="0" AngleY="0" />
                                                <RotateTransform Angle="180" />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Grid.RenderTransform>
                                        <Border Background="{TemplateBinding Background}" CornerRadius="6">
                                            <Viewbox
                                                Margin="{TemplateBinding Padding}"
                                                HorizontalAlignment="Left"
                                                SnapsToDevicePixels="True"
                                                StretchDirection="DownOnly">
                                                <!--  <TextBlock  -->
                                                <!--  FontSize="{TemplateBinding FontSize}"  -->
                                                <!--  Foreground="#ffffff"  -->
                                                <!--  RenderTransformOrigin="0.5,0.5"  -->
                                                <!--  SnapsToDevicePixels="True"  -->
                                                <!--  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, StringFormat={}{0}%}"  -->
                                                <!--  VerticalAlignment="Center">  -->
                                                <!--     <TextBlock.RenderTransform> -->
                                                <!--         <TransformGroup> -->
                                                <!--             <ScaleTransform ScaleX="-1" ScaleY="1" /> -->
                                                <!--             <SkewTransform AngleX="0" AngleY="0" /> -->
                                                <!--             <RotateTransform Angle="0" /> -->
                                                <!--             <TranslateTransform /> -->
                                                <!--         </TransformGroup> -->
                                                <!--     </TextBlock.RenderTransform> -->
                                                <!-- </TextBlock> -->
                                            </Viewbox>
                                        </Border>
                                        <Border
                                            BorderBrush="#000000"
                                            BorderThickness="1"
                                            CornerRadius="6"
                                            Opacity="0.1" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0:0:0" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1.5" Value="1.95,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:3" Value="0.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#c5c5c5" />
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="width1" Property="Width" Value="0.25*" />
                            <Setter TargetName="width2" Property="Width" Value="0.725*" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BtnProgressBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Height" Value="4" />
        <Setter Property="Background" Value="{StaticResource Pr500}" />
        <Setter Property="FontSize" Value="10" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid Background="Transparent">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid Height="{TemplateBinding Height}">
                            <Border
                                Background="Black"
                                CornerRadius="1"
                                Opacity="0.05" />
                            <Border
                                Background="{StaticResource Pr200}"
                                BorderThickness="0"
                                CornerRadius="1"
                                Opacity="1" />
                            <Grid Margin="{TemplateBinding BorderThickness}">
                                <Border x:Name="PART_Track" BorderThickness="0" />
                                <Grid
                                    x:Name="PART_Indicator"
                                    HorizontalAlignment="Left"
                                    ClipToBounds="True">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="width1" />
                                        <ColumnDefinition x:Name="width2" Width="0" />
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="Animation" RenderTransformOrigin="0.5,0.5">
                                        <Grid.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="1" ScaleY="-1" />
                                                <SkewTransform AngleX="0" AngleY="0" />
                                                <RotateTransform Angle="180" />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Grid.RenderTransform>
                                        <Border Background="{TemplateBinding Background}" CornerRadius="1">
                                            <Viewbox
                                                Margin="{TemplateBinding Padding}"
                                                HorizontalAlignment="Left"
                                                SnapsToDevicePixels="True"
                                                StretchDirection="DownOnly">
                                                <!--  <TextBlock  -->
                                                <!--  FontSize="{TemplateBinding FontSize}"  -->
                                                <!--  Foreground="#ffffff"  -->
                                                <!--  RenderTransformOrigin="0.5,0.5"  -->
                                                <!--  SnapsToDevicePixels="True"  -->
                                                <!--  Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, StringFormat={}{0}%}"  -->
                                                <!--  VerticalAlignment="Center">  -->
                                                <!--     <TextBlock.RenderTransform> -->
                                                <!--         <TransformGroup> -->
                                                <!--             <ScaleTransform ScaleX="-1" ScaleY="1" /> -->
                                                <!--             <SkewTransform AngleX="0" AngleY="0" /> -->
                                                <!--             <RotateTransform Angle="0" /> -->
                                                <!--             <TranslateTransform /> -->
                                                <!--         </TransformGroup> -->
                                                <!--     </TextBlock.RenderTransform> -->
                                                <!-- </TextBlock> -->
                                            </Viewbox>
                                        </Border>
                                        <Border
                                            BorderBrush="#000000"
                                            BorderThickness="0"
                                            CornerRadius="1"
                                            Opacity="0.1" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0:0:0" Value="0.5,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:1.5" Value="1.95,0.5" />
                                            <EasingPointKeyFrame KeyTime="0:0:3" Value="0.5,0.5" />
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="#c5c5c5" />
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="width1" Property="Width" Value="0.25*" />
                            <Setter TargetName="width2" Property="Width" Value="0.725*" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        x:Key="RoundProgressBarStyle"
        TargetType="{x:Type ProgressBar}">
        <Style.Resources>
            <converters:RoundProgressPathConverter x:Key="Conv" />
            <!--  нам понадобится пара констант  -->
            <!--  доля рабиуса для внутренней части  -->
            <sys:Double x:Key="RelativeThickness">0.75</sys:Double>
            <!--  просто 0  -->
            <sys:Double x:Key="Zero">0.0</sys:Double>
            <!--  просто 1  -->
            <sys:Double x:Key="One">1.0</sys:Double>
            <!--  какой процент рисовать для неопределённого состояния  -->
            <sys:Double x:Key="IndeterminatePart">0.25</sys:Double>
            <!--  обычно прогресс по умолчанию зелёный  -->
            <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025" />
            <!--  стандартный фон  -->
            <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6" />
            <!--  стандартный цвет границы  -->
            <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC" />
        </Style.Resources>
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}" />
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <!--  это фон, красим его в цвет фона  -->
                        <Path
                            Fill="{TemplateBinding Background}"
                            Stretch="Uniform"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeThickness="{TemplateBinding BorderThickness}">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}" ConverterParameter="{StaticResource RelativeThickness}">
                                    <!--  val=1, min=0, max=1 даёт полный круг  -->
                                    <Binding Source="{StaticResource One}" />
                                    <Binding Source="{StaticResource Zero}" />
                                    <Binding Source="{StaticResource One}" />
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <Path
                            Name="Indicator"
                            Fill="{TemplateBinding Foreground}"
                            Stretch="Uniform">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}" ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <!--  это анимировнная штука, будет показываться в неопределённом состоянии  -->
                        <Path
                            Name="Animation"
                            Fill="{TemplateBinding Foreground}"
                            RenderTransformOrigin="0.5,0.5"
                            Stretch="Uniform"
                            Visibility="Collapsed">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}" ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Source="{StaticResource IndeterminatePart}" />
                                    <Binding Source="{StaticResource Zero}" />
                                    <Binding Source="{StaticResource One}" />
                                </MultiBinding>
                            </Path.Data>
                            <!--  положим пустое вращение, чтобы к нему цеплялась анимация  -->
                            <Path.RenderTransform>
                                <RotateTransform />
                            </Path.RenderTransform>
                        </Path>
                        <!--  в неопределённом состоянии запускаем вращающуюся анимацию  -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation
                                            Storyboard.TargetName="Animation"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                            From="0"
                                            To="360"
                                            Duration="0:0:2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  в случае неопределённого состояния уберём нормальный индикатор и покажем анимацию  -->
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        x:Key="BtnCircleProgressBar"
        TargetType="{x:Type ProgressBar}">
        <Style.Resources>
            <converters:RoundProgressPathConverter x:Key="Conv" />
            <!--  нам понадобится пара констант  -->
            <!--  доля рабиуса для внутренней части  -->
            <sys:Double x:Key="RelativeThickness">0.75</sys:Double>
            <!--  просто 0  -->
            <sys:Double x:Key="Zero">0.0</sys:Double>
            <!--  просто 1  -->
            <sys:Double x:Key="One">1.0</sys:Double>
            <!--  какой процент рисовать для неопределённого состояния  -->
            <sys:Double x:Key="IndeterminatePart">0.25</sys:Double>
            <!--  обычно прогресс по умолчанию зелёный  -->
            <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025" />
            <!--  стандартный фон  -->
            <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6" />
            <!--  стандартный цвет границы  -->
            <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC" />
        </Style.Resources>
        <Setter Property="Foreground" Value="{StaticResource Pr500}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <!--  это фон, красим его в цвет фона  -->
                        <Path
                            Fill="{TemplateBinding Background}"
                            Stretch="Uniform"
                            Stroke="{TemplateBinding BorderBrush}"
                            StrokeThickness="{TemplateBinding BorderThickness}">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}" ConverterParameter="{StaticResource RelativeThickness}">
                                    <!--  val=1, min=0, max=1 даёт полный круг  -->
                                    <Binding Source="{StaticResource One}" />
                                    <Binding Source="{StaticResource Zero}" />
                                    <Binding Source="{StaticResource One}" />
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <Path
                            Name="Indicator"
                            Fill="{TemplateBinding Foreground}"
                            Stretch="Uniform">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}" ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Path="Value" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Minimum" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Maximum" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Path.Data>
                        </Path>
                        <!--  это анимировнная штука, будет показываться в неопределённом состоянии  -->
                        <Path
                            Name="Animation"
                            Fill="{TemplateBinding Foreground}"
                            RenderTransformOrigin="0.5,0.5"
                            Stretch="Uniform"
                            Visibility="Collapsed">
                            <Path.Data>
                                <MultiBinding Converter="{StaticResource Conv}" ConverterParameter="{StaticResource RelativeThickness}">
                                    <Binding Source="{StaticResource IndeterminatePart}" />
                                    <Binding Source="{StaticResource Zero}" />
                                    <Binding Source="{StaticResource One}" />
                                </MultiBinding>
                            </Path.Data>
                            <!--  положим пустое вращение, чтобы к нему цеплялась анимация  -->
                            <Path.RenderTransform>
                                <RotateTransform />
                            </Path.RenderTransform>
                        </Path>
                        <!--  в неопределённом состоянии запускаем вращающуюся анимацию  -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimation
                                            Storyboard.TargetName="Animation"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                            From="0"
                                            To="360"
                                            Duration="0:0:2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  в случае неопределённого состояния уберём нормальный индикатор и покажем анимацию  -->
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
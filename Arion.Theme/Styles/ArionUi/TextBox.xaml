<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:converters="clr-namespace:Arion.Theme.Converters"
    xmlns:wpf="clr-namespace:Arion.Theme.Extensions"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="FontFamily.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:TextFieldClearButtonVisibilityConverter x:Key="ClearButtonVisibilityConverter" />
    <converters:TextFieldPrefixTextVisibilityConverter x:Key="PrefixTextVisibilityConverter" />
    <converters:NotConverter x:Key="NotConverter" />
    <converters:MathConverter Operation="Multiply" x:Key="MathMultiplyConverter" />
    <converters:FloatingHintOffsetCalculationConverter x:Key="FloatingHintOffsetCalculationConverter" />
    <converters:CursorConverter FallbackCursor="Arrow" x:Key="ArrowCursorConverter" />
    <converters:CursorConverter FallbackCursor="IBeam" x:Key="IBeamCursorConverter" />
    <converters:StringLengthValueConverter x:Key="StringLengthValueConverter" />

    <Style TargetType="{x:Type TextBox}" x:Key="Base">
        <Setter Property="Height" Value="40" />
        <Setter Property="FontFamily" Value="{StaticResource BaseFont}" />
        <Setter Property="Foreground" Value="#252C32" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        x:Name="Border">
                        <ScrollViewer
                            FontWeight="Medium"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsTabStop="False"
                            Margin="{TemplateBinding Padding}"
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            VerticalAlignment="Center"
                            Width="{TemplateBinding Width}"
                            x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" />
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Cursor" Value="No" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="40" />
        <Setter Property="Foreground" Value="#252C32" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="BorderBrush" Value="#DDE2E4" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="#FFFFFF" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        x:Name="Border">
                        <ScrollViewer
                            FontWeight="Medium"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsTabStop="False"
                            Padding="{TemplateBinding Padding}"
                            TextElement.Foreground="{TemplateBinding Foreground}"
                            VerticalAlignment="Center"
                            Width="{TemplateBinding Width}"
                            x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFFFFF" />
                            <Setter Property="BorderBrush" Value="#B0BABF" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="#FFFFFF" />
                            <Setter Property="BorderBrush" Value="#5B6871" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Cursor" Value="No" />
                            <Setter Property="Background" Value="#F6F8F9" />
                            <Setter Property="Foreground" Value="#B0BABF" />
                            <Setter Property="BorderBrush" Value="#EEF0F2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Cursor" Value="No" />
                            <Setter Property="Background" Value="#F6F8F9" />
                            <Setter Property="Foreground" Value="#B0BABF" />
                            <Setter Property="BorderBrush" Value="#EEF0F2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBoxBase}" x:Key="MaterialDesignTextBoxBase">
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Padding" Value="{x:Static wpf:Constants.TextBoxDefaultPadding}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="SelectionBrush" Value="{DynamicResource PrimaryHueLightBrush}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid Cursor="{TemplateBinding Cursor, Converter={StaticResource ArrowCursorConverter}}">
                        <Border
                            Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                            HorizontalAlignment="Stretch"
                            RenderTransformOrigin="0.5,0.5"
                            VerticalAlignment="Stretch"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled,
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Border.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="0" x:Name="RippleOnFocusScaleTransform" />
                            </Border.RenderTransform>
                        </Border>
                        <AdornerDecorator>
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True"
                                wpf:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                                wpf:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}"
                                x:Name="border">
                                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <wpf:PackIcon
                                        Grid.Column="0"
                                        Height="{TemplateBinding wpf:TextFieldAssist.LeadingIconSize}"
                                        Kind="{TemplateBinding wpf:TextFieldAssist.LeadingIcon}"
                                        Margin="0,0,6,0"
                                        Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                        VerticalAlignment="Center"
                                        Visibility="{TemplateBinding wpf:TextFieldAssist.HasLeadingIcon,
                                                                     Converter={StaticResource BooleanToVisibilityConverter}}"
                                        Width="{TemplateBinding wpf:TextFieldAssist.LeadingIconSize}"
                                        x:Name="LeadingPackIcon" />

                                    <Grid
                                        Grid.Column="1"
                                        MinWidth="1"
                                        x:Name="grid">
                                        <Grid Grid.Column="0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <TextBlock
                                                FontSize="{TemplateBinding FontSize}"
                                                Grid.Column="0"
                                                Margin="0,0,2,0"
                                                Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                                Text="{TemplateBinding wpf:TextFieldAssist.PrefixText}"
                                                x:Name="PrefixTextBlock">
                                                <TextBlock.Visibility>
                                                    <MultiBinding Converter="{StaticResource PrefixTextVisibilityConverter}">
                                                        <Binding ElementName="Hint" Path="IsHintInFloatingPosition" />
                                                        <Binding Path="(wpf:TextFieldAssist.PrefixText)" RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.Visibility>
                                            </TextBlock>

                                            <ScrollViewer
                                                Cursor="{TemplateBinding Cursor,
                                                                         Converter={StaticResource IBeamCursorConverter}}"
                                                Focusable="false"
                                                Grid.Column="1"
                                                HorizontalScrollBarVisibility="Hidden"
                                                Panel.ZIndex="1"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                VerticalScrollBarVisibility="Hidden"
                                                wpf:ScrollViewerAssist.IgnorePadding="True"
                                                x:Name="PART_ContentHost" />

                                            <TextBlock
                                                FontSize="{TemplateBinding FontSize}"
                                                Grid.Column="2"
                                                Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                                Text="{TemplateBinding wpf:TextFieldAssist.SuffixText}"
                                                x:Name="SuffixTextBlock" />
                                        </Grid>

                                        <wpf:SmartHint
                                            FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                            FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                            FontFamily="{TemplateBinding wpf:HintAssist.FontFamily}"
                                            FontSize="{TemplateBinding FontSize}"
                                            Grid.Column="0"
                                            HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                            HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                            Margin="{TemplateBinding wpf:TextFieldAssist.TextBoxViewMargin}"
                                            UseFloating="{TemplateBinding wpf:HintAssist.IsFloating}"
                                            x:Name="Hint">
                                            <wpf:SmartHint.Hint>
                                                <Border
                                                    Background="{TemplateBinding wpf:HintAssist.Background}"
                                                    CornerRadius="2"
                                                    x:Name="HintBackgroundBorder">
                                                    <ContentPresenter Content="{TemplateBinding wpf:HintAssist.Hint}" x:Name="HintWrapper" />
                                                </Border>
                                            </wpf:SmartHint.Hint>
                                        </wpf:SmartHint>

                                    </Grid>

                                    <wpf:PackIcon
                                        Grid.Column="2"
                                        Height="{TemplateBinding wpf:TextFieldAssist.TrailingIconSize}"
                                        Kind="{TemplateBinding wpf:TextFieldAssist.TrailingIcon}"
                                        Margin="4,0,0,0"
                                        Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                        VerticalAlignment="Center"
                                        Visibility="{TemplateBinding wpf:TextFieldAssist.HasTrailingIcon,
                                                                     Converter={StaticResource BooleanToVisibilityConverter}}"
                                        Width="{TemplateBinding wpf:TextFieldAssist.TrailingIconSize}"
                                        x:Name="TrailingPackIcon" />
                                </Grid>
                            </Border>
                        </AdornerDecorator>
                        <Border
                            Background="{TemplateBinding BorderBrush}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                            Height="0"
                            HorizontalAlignment="Stretch"
                            SnapsToDevicePixels="True"
                            VerticalAlignment="Bottom"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}"
                            x:Name="borderUnderline" />
                        <Canvas VerticalAlignment="Bottom">
                            <Grid
                                Canvas.Top="2"
                                Width="{Binding ActualWidth, ElementName=border}"
                                x:Name="FooterGrid">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Style="{Binding Path=(wpf:HintAssist.HelperTextStyle), RelativeSource={RelativeSource TemplatedParent}}" x:Name="HelperTextTextBlock" />
                                <Border Grid.Column="1" x:Name="CharacterCounterContainer">
                                    <TextBlock Style="{Binding Path=(wpf:TextFieldAssist.CharacterCounterStyle), RelativeSource={RelativeSource TemplatedParent}}" x:Name="CharacterCounterTextBlock" />
                                </Border>
                            </Grid>
                        </Canvas>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="0"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            Duration="0:0:0.3"
                                            From="0"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Duration="0"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0" />
                                        <DoubleAnimation
                                            BeginTime="0:0:0.45"
                                            Duration="0"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation
                                            Duration="0"
                                            Storyboard.TargetProperty="ScaleX"
                                            To="0" />
                                        <DoubleAnimation
                                            Duration="0"
                                            Storyboard.TargetProperty="ScaleY"
                                            To="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="Hint" Value="{Binding Path=(wpf:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="HintOpacity" TargetName="Hint" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FloatingOffset" TargetName="Hint">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" TargetName="grid">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                            <Setter Property="Padding" Value="16,8,12,8" />
                            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" TargetName="Hint" Value="{x:Static wpf:Constants.DefaultTextBoxViewMarginEmbedded}" />
                            <Setter Property="Margin" TargetName="HelperTextTextBlock" Value="16,0,0,0" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="Padding" Value="16,16,12,16" />
                            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" TargetName="Hint" Value="{x:Static wpf:Constants.DefaultTextBoxViewMarginEmbedded}" />
                            <Setter Property="Margin" TargetName="HelperTextTextBlock" Value="16,0,0,0" />
                            <Setter Property="FloatingOffset" TargetName="Hint">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding Path="FontFamily" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingScale)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="(wpf:HintAssist.FloatingOffset)" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="HintOpacity" TargetName="Hint" Value="1" />
                            <Setter Property="Opacity" TargetName="HintWrapper" Value="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}" />
                            <!-- <Setter Property="Visibility" TargetName="Underline" Value="Collapsed" /> -->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsHintInFloatingPosition" SourceName="Hint" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="wpf:HintAssist.Background" Value="{DynamicResource MaterialDesignPaper}" />
                            <Setter Property="Padding" TargetName="HintBackgroundBorder" Value="4,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="HintWrapper" Value="1" />
                        </MultiTrigger>
                        <DataTrigger Value="0">
                            <DataTrigger.Binding>
                                <PriorityBinding>
                                    <Binding
                                        FallbackValue="0"
                                        Path="MaxLength"
                                        RelativeSource="{RelativeSource Self}" />
                                    <Binding Source="0" />
                                </PriorityBinding>
                            </DataTrigger.Binding>
                            <Setter Property="Visibility" TargetName="CharacterCounterContainer" Value="Collapsed" />
                        </DataTrigger>

                        <!--  IsEnabled  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- <Setter Property="Opacity" TargetName="PART_ClearButton" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" /> -->
                            <Setter Property="wpf:BottomDashedLineAdorner.IsAttached" TargetName="border" Value="True" />
                            <Setter Property="Height" TargetName="borderUnderline" Value="0" />
                            <Setter Property="Opacity" TargetName="grid" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <!-- <Setter Property="Opacity" TargetName="PART_ClearButton" Value="1" /> -->
                            <Setter Property="Opacity" TargetName="border" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter Property="Height" TargetName="borderUnderline" Value="1" />
                            <Setter Property="Opacity" TargetName="borderUnderline" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <!--  Opacity already applied on 'border'  -->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                            <Setter Property="Opacity" TargetName="HintWrapper">
                                <Setter.Value>
                                    <Binding
                                        Converter="{StaticResource MathMultiplyConverter}"
                                        ConverterParameter="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}"
                                        Path="(wpf:HintAssist.HintOpacity)"
                                        RelativeSource="{RelativeSource TemplatedParent}" />
                                </Setter.Value>
                            </Setter>
                            <!-- <Setter Property="Opacity" TargetName="PART_ClearButton" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" /> -->
                            <Setter Property="Opacity" TargetName="PART_ContentHost" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter Property="Opacity" TargetName="PrefixTextBlock" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter Property="Opacity" TargetName="SuffixTextBlock" Value="{x:Static wpf:Constants.TextBoxNotEnabledOpacity}" />
                        </MultiTrigger>

                        <!--  IsKeyboardFocused  -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <!-- <Setter Property="IsActive" TargetName="Underline" Value="True" /> -->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="Margin" TargetName="border" Value="-1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Height" TargetName="borderUnderline" Value="2" />
                        </MultiTrigger>

                        <!--  IsMouseOver  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="border" Value="0,0,0,2" />
                            <Setter Property="Padding" TargetName="border" Value="0,4,0,3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                            <Setter Property="Height" TargetName="borderUnderline" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="Margin" TargetName="border" Value="-1" />
                        </MultiTrigger>

                        <!--  Validation.HasError  -->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            <!-- <Setter Property="Background" TargetName="Underline" Value="{DynamicResource MaterialDesignValidationErrorBrush}" /> -->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="Margin" TargetName="FooterGrid" Value="0,0,1,0" />
                            <Setter Property="Margin" TargetName="border" Value="-1" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.HelperTextStyle" Value="{StaticResource MaterialDesignHelperTextBlock}" />
        <Setter Property="wpf:TextFieldAssist.CharacterCounterStyle" Value="{StaticResource MaterialDesignCharacterCounterTextBlock}" />
        <Setter Property="wpf:TextFieldAssist.CharacterCounterVisibility" Value="Visible" />
        <Setter Property="wpf:TextFieldAssist.IncludeSpellingSuggestions" Value="{Binding RelativeSource={RelativeSource Self}, Path=(SpellCheck.IsEnabled)}" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" Value="{x:Static wpf:Constants.DefaultTextBoxViewMargin}" />
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
    </Style>
</ResourceDictionary>